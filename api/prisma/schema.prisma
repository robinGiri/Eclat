// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String?
  slug          String?
  description   String?
  category      String?
  brand         Brand?   @relation(fields: [brandId], references: [id])
  price         Float?
  discount      Float?
  afterdiscount Float?
  seller        Seller?  @relation(fields: [sellerId], references: [id])
  isFeatured    Boolean
  tags          String?
  stock         Stock?   @relation(fields: [stockId], references: [id])
  status        String?
  viewCount     Int?
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt
  images        Image[]
  sellerId      Int?
  brandId       Int?
  stockId       Int?

  CartItem CartItem[]
}

model Test {
  id   Int    @id @default(autoincrement())
  name String
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String?
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Brand {
  id   Int     @id @default(autoincrement())
  name String?

  products Product[]
}

model Seller {
  id      Int       @id @default(autoincrement())
  name    String?
  Product Product[]
}

model Stock {
  id        Int       @id @default(autoincrement())
  quantity  Int
  productId Int
  Product   Product[]
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  role         String    @default("customer")
  address      String
  phone        String?
  password     String?
  image        String?
  token        String?
  forgetToken  String?
  validateTill DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Cart         Cart[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  total     Float
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  cart      Cart     @relation(fields: [cartId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
