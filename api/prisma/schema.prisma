// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SELLER
  CUSTOMER
  DRIVER
}

model Product {
  id            Int          @id @default(autoincrement())
  name          String?
  slug          String?
  description   String?
  category      String?
  brand         Brand?       @relation(fields: [brandId], references: [id])
  price         Float?
  discount      Float?
  afterdiscount Float?
  seller        Seller?      @relation(fields: [sellerId], references: [id])
  isFeatured    Boolean
  tags          String?
  stock         Stock?       @relation(fields: [stockId], references: [id])
  status        String?
  viewCount     Int?
  createdAt     DateTime     @default(now())
  updateAt      DateTime     @updatedAt
  images        Image[]      @relation("ProductImages")
  sellerId      Int?
  brandId       Int?
  stockId       Int?
  CartItem      CartItem[]
  OrderItems    OrderItems[]
  Wishlist      Wishlist[]
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String?
  productId Int
  product   Product @relation("ProductImages", fields: [productId], references: [id], onDelete: Cascade)
}

model Brand {
  id   Int     @id @default(autoincrement())
  name String?

  products Product[]
}

model Seller {
  id      Int       @id @default(autoincrement())
  name    String?
  Product Product[]
}

model Stock {
  id        Int       @id @default(autoincrement())
  quantity  Int
  productId Int
  Product   Product[]
}

model User {
  id           Int        @id @default(autoincrement())
  name         String
  email        String     @unique
  role         UserRole   @default(CUSTOMER)
  address      String
  phone        String?
  password     String?
  image        String?
  token        String?
  forgetToken  String?
  validateTill DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  cartId       Int?       @unique
  cart         Cart?      @relation(fields: [cartId], references: [id])
  Wishlist     Wishlist[]
}

model Cart {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  cartItems  CartItem[]
  User       User?
  OrderItems OrderItems[]
}

// copy cart item to order and then delete
model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  cart      Cart     @relation(fields: [cartId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         Int          @id @default(autoincrement())
  total      Float?
  OrderItems OrderItems[]
  Purchase   Purchase[]
}

model OrderItems {
  id        Int      @id @default(autoincrement())
  OrderId   Int
  productId Int
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  Order     Order    @relation(fields: [OrderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart?    @relation(fields: [cartId], references: [id])
  cartId    Int?
}

model Purchase {
  id            Int      @id @default(autoincrement())
  paymentmethod String?
  status        String
  OrderId       Int?
  Order         Order?   @relation(fields: [OrderId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  productId Int
  Product   Product  @relation(fields: [productId], references: [id])
  userId    Int?
  User      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
