// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SELLER
  CUSTOMER
  DRIVER
}

enum PaymentMethod {
  khalti
  esewa
  cashondelivery
}

enum ShippingStatus {
  ordered
  shipping
  delivered
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String?
  slug          String?
  description   String?
  category      String?
  brand         Brand?   @relation(fields: [brandId], references: [id])
  price         Float?
  discount      Float?
  afterdiscount Float?
  seller        User?    @relation(fields: [sellerId], references: [id])
  isFeatured    Boolean
  tags          String?
  stock         Int?
  status        String?
  viewCount     Int?
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt
  images        Image[]  @relation("ProductImages")
  sellerId      Int?
  brandId       Int?

  CartItem   CartItem[]
  OrderItems OrderItems[]
  Season     Season?      @relation(fields: [seasonId], references: [id])
  seasonId   Int?
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String?
  productId Int
  product   Product @relation("ProductImages", fields: [productId], references: [id], onDelete: Cascade)
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String?
  products Product[]
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  role         UserRole  @default(CUSTOMER)
  address      String
  phone        String?
  password     String?
  image        String?
  token        String?
  forgetToken  String?
  validateTill DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Cart         Cart[]
  Product      Product[]
  Order        Order[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
  userId    Int?       @unique
  User      User?      @relation(fields: [userId], references: [id])
}

// copy cart item to order and then delete
model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int?
  productId Int?
  quantity  Int?
  product   Product? @relation(fields: [productId], references: [id])
  cart      Cart?    @relation(fields: [cartId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         Int          @id @default(autoincrement())
  total      Float?       @default(0)
  userId     Int?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  OrderItems OrderItems[]
  Purchase   Purchase[]
  Shipping   Shipping[]
  customer   User?        @relation(fields: [userId], references: [id])
}

model OrderItems {
  id        Int      @id @default(autoincrement())
  OrderId   Int
  productId Int
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  Order     Order    @relation(fields: [OrderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Season {
  id      Int       @id @default(autoincrement())
  name    String?
  Product Product[]
}

model Setting {
  id            Int @id @default(autoincrement())
  currentSeason Int @default(0)
}

model Purchase {
  id            Int            @id @default(autoincrement())
  paymentmethod PaymentMethod?
  token         String
  amount        Float?
  OrderId       Int?
  Shipping      Shipping[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Order         Order?         @relation(fields: [OrderId], references: [id])
}

model Shipping {
  id         Int            @id @default(autoincrement())
  OrderId    Int?
  status     ShippingStatus @default(ordered)
  purchaseId Int?
  Order      Order?         @relation(fields: [OrderId], references: [id])
  Purchase   Purchase?      @relation(fields: [purchaseId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

// model Wishlist {
//   id        Int      @id @default(autoincrement())
//   productId Int
//   Product   Product  @relation(fields: [productId], references: [id])
//   userId    Int?
//   User      User?    @relation(fields: [userId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
